@using aspnet_contact_form.Models.Requests
@model CreateContactMessageRequest
@{
    ViewData["Title"] = "İletişim";
}

<div class="wrapper">
    <div class="visual-column">
        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="#2ecc71" stroke-width="1.5" stroke-linecap="butt" stroke-linejoin="round">
            <rect x="3" y="4" width="18" height="16" rx="2" ry="2" />
            <polyline points="20.5,7 12,13 3.5,7" />
        </svg>
        <h3>Hızlı Destek Hattı</h3>
        <p>
            Tüm talepleriniz ve sorularınız en geç 24 saat içinde ilgili departman yöneticisine iletilmektedir.
            Sizinle en kısa sürede iletişime geçeceğiz.
        </p>

        <div class="info-box">
            <p>
                <strong>Acil Durumlar için:</strong>
                <span style="font-weight: bold; color: #2ecc71">+90 500 000 00 00</span>
            </p>
        </div>
    </div>

    <div class="form-column">
        <h2>İletişim Formu</h2>

        <div id="statusBox" class="mb-2"></div>

        <form id="contactForm" method="post" novalidate>
            @Html.AntiForgeryToken()

            <div class="input-group" data-required="true">
                <label asp-for="FullName" class="required">Tam Adınız</label>
                <input asp-for="FullName" autocomplete="name" />
                <span asp-validation-for="FullName" class="error-message"></span>
            </div>

            <div class="input-group" data-required="true">
                <label asp-for="Email" class="required">E-mail</label>
                <input asp-for="Email" type="email" autocomplete="email" />
                <span asp-validation-for="Email" class="error-message"></span>
            </div>

            <div class="input-group">
                <label asp-for="Phone">Telefon</label>
                <input asp-for="Phone" inputmode="tel" autocomplete="tel" />
                <span asp-validation-for="Phone" class="error-message"></span>
            </div>

            <div class="input-group" data-required="true">
                <label asp-for="DepartmentId" class="required">Departman Adı</label>
                <select asp-for="DepartmentId" id="departmentSelect" data-selected="@Model?.DepartmentId">
                    <option value="">Lütfen Seçiniz</option>
                </select>
                <span asp-validation-for="DepartmentId" class="error-message"></span>
            </div>

            <div class="input-group" data-required="true">
                <label asp-for="Message" class="required">Mesaj</label>
                <textarea asp-for="Message"></textarea>
                <span asp-validation-for="Message" class="error-message"></span>
            </div>

            <button type="submit" id="submitBtn">Gönder</button>

            <p style="text-align:right; font-size:0.75em; color:#95a5a6; margin-top:15px;">
                <span style="color:#e74c3c">*</span> Zorunlu alanları doldurunuz.
            </p>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const sel = document.getElementById('departmentSelect');
            const selected = sel?.dataset?.selected;
            const keepHeader = () => {
                if (!sel.querySelector('option[value=""]')) {
                    sel.insertAdjacentHTML('afterbegin', '<option value="">Lütfen Seçiniz</option>');
                }
            };

            fetch('/api/departments', { headers: { 'Accept': 'application/json' } })
                .then(res => {
                    if (res.status === 404) { keepHeader(); return []; }
                    if (!res.ok) throw new Error('Departman listesi alınamadı');
                    return res.json();
                })
                .then(items => {
                    const options = items.map(d => `<option value="${d.id}">${d.name}</option>`).join('');
                    sel.innerHTML = `<option value="">Lütfen Seçiniz</option>${options}`;
                    if (selected) sel.value = selected;
                })
                .catch(() => { keepHeader(); });
        });

        (function () {
            const form = document.getElementById('contactForm');
            const statusBox = document.getElementById('statusBox');
            const btn = document.getElementById('submitBtn');

            const showStatus = (ok, msg) => {
                statusBox.className = ok ? 'alert alert-success' : 'alert alert-danger';
                statusBox.textContent = msg || (ok ? 'İşlem başarılı.' : 'Bir hata oluştu.');
            };

            const clearFieldErrors = () => {
                document.querySelectorAll('[data-valmsg-for]').forEach(span => span.textContent = '');
            };

            const setFieldError = (field, msg) => {
                const span = document.querySelector(`[data-valmsg-for="${field}"]`);
                if (span) span.textContent = msg;
            };

            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                clearFieldErrors();
                statusBox.className = '';
                statusBox.textContent = '';

                if (!form.reportValidity()) return;

                const payload = {
                    fullName: document.getElementById('FullName').value.trim(),
                    email: document.getElementById('Email').value.trim(),
                    phone: document.getElementById('Phone').value.trim(),
                    departmentId: parseInt(document.getElementById('departmentSelect').value, 10) || null,
                    message: document.getElementById('Message').value.trim()
                };

                if (!payload.departmentId) {
                    setFieldError('DepartmentId', 'Lütfen bir departman seçiniz.');
                    return;
                }

                btn.disabled = true;

                try {
                    const res = await fetch('/api/contacts', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    const data = await res.json().catch(() => ({}));

                    if (res.ok) {
                        showStatus(true, data?.message || 'Mesajınız başarıyla gönderildi.');
                        form.reset();
                        document.getElementById('departmentSelect').value = '';
                    } else {
                        showStatus(false, data?.message || 'Bir hata oluştu.');
                        const errs = data?.errors;
                        if (errs && typeof errs === 'object') {
                            for (const key of Object.keys(errs)) {
                                const val = errs[key];
                                let msg = '';
                                if (Array.isArray(val) && val.length) msg = val[0];
                                else if (val && Array.isArray(val.errors) && val.errors.length) msg = val.errors[0].errorMessage || val.errors[0];
                                else if (typeof val === 'string') msg = val;
                                if (msg) setFieldError(key, msg);
                            }
                        }
                    }
                } catch (err) {
                    console.error(err);
                    showStatus(false, 'İstek gönderilirken bir hata oluştu.');
                } finally {
                    btn.disabled = false;
                }
            });
        })();
    </script>
}
